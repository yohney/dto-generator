using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using DtoGenerator.Logic.Infrastructure;
using DtoGenerator.Logic.Model;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.MSBuild;
using static DtoGenerator.Logic.UI.PropertySelectorViewModel;

namespace DtoGenerator.Logic.UI
{
    public class PropertySelectorViewModel : ViewModelBase
    {
        public static async Task<PropertySelectorViewModel> Create(Document doc, string dtoName, SolutionLocation dtoLocation, Document existingDto = null)
        {
            var autogeneratedProperties = await EntityParser.GetAutoGeneratedProperties(existingDto);

            var instance = new PropertySelectorViewModel();
            instance._doc = doc;
            //do not use instance.RelatedEntiesByObject here
            if (existingDto != null)
            {
                instance._selectedGeneratorProperties.RelatedEntiesByObject = await EntityParser.HasEntities(doc, existingDto, instance.RelatedEntiesByObject);
            }

            if (instance.RelatedEntiesByObject)
            {
                var relatedMappedPoperties = await EntityParser.GetRelatedMappedPoperties(existingDto);
                autogeneratedProperties = relatedMappedPoperties;
            }
               
            instance.EntityModel = await EntityViewModel.CreateRecursive(doc, depth: 5, existingProperties: autogeneratedProperties, canReuseBaseMapper: true, RelatedEntiesByObject: instance.RelatedEntiesByObject, relatedSyntaxInExistingProperties: instance.RelatedEntiesByObject);
            instance.EntityModel.DtoName = dtoName;
            instance.DtoLocation = dtoLocation;

            var isDerived = await EntityParser.HasBaseDto(existingDto, instance.EntityModel.BaseEntityDtoName);
            instance.EntityModel.ReuseBaseEntityMapper |= isDerived;

            if (existingDto != null)
            {
                instance.AddDataContract = await EntityParser.HasDataContract(existingDto);
                instance.AddDataAnnotations = await EntityParser.HasDataAnnotations(existingDto);
                instance.StyleCop = await EntityParser.HasStyleCop(existingDto);
                if (instance.RelatedEntiesByObject)
                    instance.MapEntitiesById = await EntityParser.HasMapEntitiesById(existingDto, instance.MapEntitiesById);
                else
                    instance.MapEntitiesById = false;
            }

            return instance;
        }
        private Document _doc;
        private PropertySelectorViewModel()
        {
            this.GenerateMapper = true;
        }

        public class GeneratorProperties
        {
            public bool GenerateMapper { get; set; }
            public bool UseBIANetMapperInfra { get; set; }
            public bool AddDataContract { get; set; }
            public bool AddDataAnnotations { get; set; }
            public bool RelatedEntiesByObject { get; set; }
            public bool MapEntitiesById { get; set; }
            public bool StyleCop { get; set; }
            public GeneratorProperties()
            {
                GenerateMapper = true; UseBIANetMapperInfra = true;  AddDataAnnotations = true; AddDataContract = false; MapEntitiesById = true; RelatedEntiesByObject = true; StyleCop = true;
            }
        }

        private GeneratorProperties _selectedGeneratorProperties = new GeneratorProperties();
        public GeneratorProperties SelectedGeneratorProperties
        {
            get { return _selectedGeneratorProperties; }
        }

        public bool GenerateMapper
        {
            get
            {
                return this._selectedGeneratorProperties.GenerateMapper;
            }
            set
            {
                if (value != this._selectedGeneratorProperties.GenerateMapper)
                {
                    this._selectedGeneratorProperties.GenerateMapper = value;
                    this.InvokePropertyChanged(nameof(GenerateMapper));
                }
            }
        }

        public bool UseBIANetMapperInfra
        {
            get
            {
                return this._selectedGeneratorProperties.UseBIANetMapperInfra;
            }
            set
            {
                if (value != this._selectedGeneratorProperties.UseBIANetMapperInfra)
                {
                    this._selectedGeneratorProperties.UseBIANetMapperInfra = value;
                    this.InvokePropertyChanged(nameof(UseBIANetMapperInfra));
                }
            }
        }
        public bool AddDataContract
        {
            get
            {
                return this._selectedGeneratorProperties.AddDataContract;
            }
            set
            {
                if (value != this._selectedGeneratorProperties.AddDataContract)
                {
                    this._selectedGeneratorProperties.AddDataContract = value;
                    this.InvokePropertyChanged(nameof(AddDataContract));
                }
            }
        }

        public bool AddDataAnnotations
        {
            get
            {
                return this._selectedGeneratorProperties.AddDataAnnotations;
            }
            set
            {
                if (value != this._selectedGeneratorProperties.AddDataAnnotations)
                {
                    this._selectedGeneratorProperties.AddDataAnnotations = value;
                    this.InvokePropertyChanged(nameof(AddDataAnnotations));
                }
            }
        }

        public bool StyleCop
        {
            get
            {
                return this._selectedGeneratorProperties.StyleCop;
            }
            set
            {
                if (value != this._selectedGeneratorProperties.StyleCop)
                {
                    this._selectedGeneratorProperties.StyleCop = value;
                    this.InvokePropertyChanged(nameof(StyleCop));
                }
            }
        }

        public bool RelatedEntiesByObject
        {
            get
            {
                return this._selectedGeneratorProperties.RelatedEntiesByObject;
            }
            set
            {
                if (value != this._selectedGeneratorProperties.RelatedEntiesByObject)
                {
                    this._selectedGeneratorProperties.RelatedEntiesByObject = value;
                    this.InvokePropertyChanged(nameof(RelatedEntiesByObject));
                    List<string> existingProperties = ExistingPropRecursive(this.EntityModel?.Properties);

                    EntityViewModel refreshEntity = (EntityViewModel.CreateRecursive(this._doc, depth: 5, existingProperties: existingProperties, canReuseBaseMapper: true, RelatedEntiesByObject: this._selectedGeneratorProperties.RelatedEntiesByObject, relatedSyntaxInExistingProperties: true)).Result;
                    refreshEntity.DtoName = this.EntityModel.DtoName;
                    refreshEntity.ReuseBaseEntityMapper = this.EntityModel.ReuseBaseEntityMapper;
                    this.EntityModel = refreshEntity;


                    this.InvokePropertyChanged(nameof(EntityModel.Properties));

                    if (!value && MapEntitiesById)
                    {
                        MapEntitiesById = false;
                        this.InvokePropertyChanged(nameof(MapEntitiesById));
                    }
                }
            }
        }

        private List<string> ExistingPropRecursive(ObservableCollection<PropertyViewModel> Properties, string prefix="")
        {
            List<string> existingProperties = new List<string>();
            if (Properties != null)
            {
                foreach (var p in Properties)
                {
                    if (p.IsSelected) existingProperties.Add(prefix + p.Name);
                    if (p.RelatedEntity?.Properties != null)
                    {
                        existingProperties.AddRange(ExistingPropRecursive(p.RelatedEntity.Properties, prefix + p.Name + "."));
                    }
                }
            }
            return existingProperties;
        }

        public bool MapEntitiesById
        {
            get
            {
                return this._selectedGeneratorProperties.MapEntitiesById;
            }
            set
            {
                if (value != this._selectedGeneratorProperties.MapEntitiesById)
                {
                    this._selectedGeneratorProperties.MapEntitiesById = value;
                    this.InvokePropertyChanged(nameof(MapEntitiesById));

                    if (value && !RelatedEntiesByObject)
                    {
                        RelatedEntiesByObject = true;
                        this.InvokePropertyChanged(nameof(RelatedEntiesByObject));
                    }
                }
            }
        }
        public SolutionLocation DtoLocation { get; set; }

        public string DtoLocationStr => DtoLocation.ToString();

        private EntityViewModel _entityModel;
        public EntityViewModel EntityModel
        {
            get
            {
                return this._entityModel;
            }
            set
            {
                if (value != this._entityModel)
                {
                    this._entityModel = value;
                    this.InvokePropertyChanged(nameof(EntityModel));
                }
            }
        }

        public EntityMetadata GetMetadata(GeneratorProperties generatorProperties)
        {
            if (this._entityModel != null)
                return this._entityModel.ConvertToMetadata(generatorProperties);

            return null;
        }
    }

    public class EntityViewModel : ViewModelBase
    {
        private EntityMetadata _originalMetadata;

        public string EntityName { get; set; }
        public string DtoName { get; set; }

        private bool _canReuseBaseMapper;
        public bool CanReuseBaseMapper
        {
            get
            {
                return this._canReuseBaseMapper;
            }
            set
            {
                if (value != this._canReuseBaseMapper)
                {
                    this._canReuseBaseMapper = value;
                    this.InvokePropertyChanged(nameof(CanReuseBaseMapper));
                }
            }
        }


        private bool _reuseBaseEntityMapper;
        public bool ReuseBaseEntityMapper
        {
            get
            {
                return this._reuseBaseEntityMapper;
            }
            set
            {
                if (value != this._reuseBaseEntityMapper)
                {
                    this._reuseBaseEntityMapper = value;
                    this.InvokePropertyChanged(nameof(ReuseBaseEntityMapper));

                    foreach (var prop in this.Properties.Where(p => p.IsInherited))
                        prop.IsVisible = !value;
                }
            }
        }

        private string _baseEntityDtoName;
        public string BaseEntityDtoName
        {
            get
            {
                return this._baseEntityDtoName;
            }
            set
            {
                if (value != this._baseEntityDtoName)
                {
                    this._baseEntityDtoName = value;
                    this.InvokePropertyChanged(nameof(BaseEntityDtoName));
                }
            }
        }

        public ObservableCollection<PropertyViewModel> Properties { get; set; }

        public static async Task<EntityViewModel> CreateRecursive(Document doc, int depth = 5, bool autoSelect = true, bool canSelectCollections = true, List<string> existingProperties = null,  bool relatedSyntaxInExistingProperties = false, bool canReuseBaseMapper = false, bool RelatedEntiesByObject=false, string prefixName = "")
        {
            var instance = new EntityViewModel();

            instance.Properties = new ObservableCollection<PropertyViewModel>();

            instance._originalMetadata = await EntityParser.FromDocument(doc, includeInherited: true);
            instance.EntityName = instance._originalMetadata.Name;

            foreach (var p in instance._originalMetadata.Properties)
            {
                var propViewModel = new PropertyViewModel(instance);
                propViewModel.Name = p.Name;
                propViewModel.IsInherited = p.IsInherited;
                propViewModel.IsVisible = true;
                propViewModel.Type = p.Type;
                propViewModel.CanSelect = true;

                if (p.IsCollection && !canSelectCollections)
                    propViewModel.CanSelect = false;

                propViewModel.IsSelected = autoSelect && p.IsSimpleProperty;

                if(existingProperties != null)
                    propViewModel.IsSelected = propViewModel.CanSelect && existingProperties.Any(x => x == prefixName + p.Name);

                if (p.IsRelation && (!p.IsCollection || RelatedEntiesByObject) && depth > 0)
                {
                    var relatedDoc = await doc.GetRelatedEntityDocument(p.RelatedEntityName);
                    if(relatedDoc != null && relatedDoc.FilePath != doc.FilePath)
                    {
                        propViewModel.RelatedEntity = await CreateRecursive(relatedDoc, prefixName: prefixName + p.Name + (relatedSyntaxInExistingProperties?".":""),  depth: depth - 1, autoSelect: false, canSelectCollections: RelatedEntiesByObject, existingProperties: existingProperties, relatedSyntaxInExistingProperties : relatedSyntaxInExistingProperties, RelatedEntiesByObject : RelatedEntiesByObject);
                    }
                    else
                    {
                        p.IsRelation = false;
                        p.IsSimpleProperty = true;
                    }
                }

                instance.Properties.Add(propViewModel);
            }

            if (canReuseBaseMapper && !string.IsNullOrWhiteSpace(instance._originalMetadata.BaseClassDtoName))
            {
                instance.CanReuseBaseMapper = true;
                instance.BaseEntityDtoName = instance._originalMetadata.BaseClassDtoName;

                if (existingProperties == null)
                {
                    if (instance.BaseEntityDtoName != "ObjectRemapDTO")
                    {
                        instance.ReuseBaseEntityMapper = true;
                    }
                    else
                    {
                        instance.ReuseBaseEntityMapper = false;
                    }
                }
                    
            }

            return instance;
        }

        private EntityViewModel()
        {

        }

        public EntityMetadata ConvertToMetadata(GeneratorProperties generatorProperties)
        {
            var result = this._originalMetadata.Clone();
            result.DtoName = this.DtoName;

            if(this.ReuseBaseEntityMapper)
                result.BaseClassDtoName = this.BaseEntityDtoName;

            var selectedProperties = this.Properties
                .Where(p => p.IsSelected)
                .ToList();

            var relatedPropertiesWithSelection = this.Properties
                .Where(p => p.RelatedEntity != null)
                .Where(p => p.RelatedEntity.HasSelectionInSubtree())
                .ToList();

            var toRemoveFromMetadata = new List<Model.PropertyMetadata>();
            foreach(var x in result.Properties)
            {
                if (!selectedProperties.Concat(relatedPropertiesWithSelection).Any(p => p.Name == x.Name))
                {
                    toRemoveFromMetadata.Add(x);
                }
                else if(x.IsRelation && (!x.IsCollection || generatorProperties.RelatedEntiesByObject))
                {
                    var related = relatedPropertiesWithSelection
                        .Where(p => p.Name == x.Name)
                        .Select(p => p.RelatedEntity)
                        .FirstOrDefault();

                    x.RelationMetadata = related?.ConvertToMetadata(generatorProperties);
                }
            }

            result.Properties.RemoveAll(p => toRemoveFromMetadata.Contains(p));

            return result;
        }

        public bool HasSelectionInSubtree()
        {
            return this.Properties.Any(p => p.IsSelected) || 
                this.Properties
                    .Where(p => p.RelatedEntity != null)
                    .Any(p => p.RelatedEntity.HasSelectionInSubtree());
        }
    }

    public class PropertyViewModel : ViewModelBase
    {
        private EntityViewModel _entityViewModel;

        public PropertyViewModel(EntityViewModel entityModel)
        {
            this._entityViewModel = entityModel;
        }

        public string Type { get; set; }
        public string Name { get; set; }
        public bool IsInherited { get; set; }

        public string NameFormatted => $"{Name} ({Type})";

        public Brush TextColor
        {
            get
            {
                if (!this.CanSelect)
                    return new SolidColorBrush(Colors.LightGray);

                return IsInherited ? new SolidColorBrush(Colors.DimGray) : new SolidColorBrush(Colors.Black);
            }
        }

        public bool IsEnabled
        {
            get
            {
                return this.CanSelect && this.IsVisible;
            }
        }


        private bool _isVisible;
        public bool IsVisible
        {
            get
            {
                return this._isVisible;
            }
            set
            {
                if (value != this._isVisible)
                {
                    this._isVisible = value;
                    this.InvokePropertyChanged(nameof(IsVisible));
                    this.InvokePropertyChanged(nameof(IsEnabled));
                    this.InvokePropertyChanged(nameof(TextColor));

                    if (value == false)
                        this.IsSelected = false;
                }
            }
        }


        private bool _isSelected;
        public bool IsSelected
        {
            get
            {
                return this._isSelected;
            }
            set
            {
                if (value != this._isSelected)
                {
                    this._isSelected = value;
                    this.InvokePropertyChanged(nameof(IsSelected));

                    if(this._relatedEntity != null)
                    {
                        foreach (var prop in this._relatedEntity.Properties)
                        {
                            if (prop.CanSelect) prop.IsSelected = value;
                        }
                    }
                }
            }
        }

        private bool _canSelect;
        public bool CanSelect
        {
            get
            {
                return this._canSelect;
            }
            set
            {
                if (value != this._canSelect)
                {
                    this._canSelect = value;
                    this.InvokePropertyChanged(nameof(CanSelect));
                    this.InvokePropertyChanged(nameof(IsEnabled));
                    this.InvokePropertyChanged(nameof(TextColor));
                }
            }
        }

        private EntityViewModel _relatedEntity;
        public EntityViewModel RelatedEntity
        {
            get
            {
                return this._relatedEntity;
            }
            set
            {
                if (value != this._relatedEntity)
                {
                    this._relatedEntity = value;
                    this.InvokePropertyChanged(nameof(RelatedEntity));
                }
            }
        }
    }
}
